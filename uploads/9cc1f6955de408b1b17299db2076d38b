{
  "natural_language": [
    "Show quarterly revenue growth YoY as line chart",
    "Find customers with purchases in 3+ categories",
    "List employees with above-average salary in their department",
    "Chart support ticket resolution time by priority (High/Medium/Low)",
    "Identify products frequently bought together (market basket analysis)",
    "Show user retention cohorts by signup month",
    "Find departments exceeding budget with variance percentage",
    "Visualize sales funnel drop-off rates between stages",
    "List customers with declining monthly spend (trend detection)",
    "Show inventory turnover ratio by product category",
    "Identify fraudulent transactions (amount > $10,000 from new IP)",
    "Chart employee promotion timelines by gender (diversity analysis)",
    "Find seasonal patterns in product returns",
    "Show customer lifetime value by acquisition channel",
    "List suppliers with on-time delivery rate below 90%"
  ],
  "sql": [
    "SELECT EXTRACT(QUARTER FROM sale_date) AS quarter, EXTRACT(YEAR FROM sale_date) AS year, SUM(amount) AS revenue, (SUM(amount) - LAG(SUM(amount), 4) OVER (ORDER BY EXTRACT(YEAR FROM sale_date), EXTRACT(QUARTER FROM sale_date))) / LAG(SUM(amount), 4) OVER (ORDER BY EXTRACT(YEAR FROM sale_date), EXTRACT(QUARTER FROM sale_date))) * 100 AS yoy_growth FROM sales GROUP BY quarter, year ORDER BY year, quarter",
    "SELECT customer_id, COUNT(DISTINCT category_id) AS unique_categories FROM orders JOIN products USING(product_id) GROUP BY customer_id HAVING COUNT(DISTINCT category_id) >= 3",
    "SELECT e.employee_name, e.salary, d.department_name, (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id) AS dept_avg FROM employees e JOIN departments d USING(department_id) WHERE e.salary > (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id)",
    "SELECT priority, AVG(EXTRACT(EPOCH FROM (resolved_at - created_at))/3600) AS avg_hours FROM support_tickets WHERE resolved_at IS NOT NULL GROUP BY priority ORDER BY CASE priority WHEN 'High' THEN 1 WHEN 'Medium' THEN 2 ELSE 3 END",
    "SELECT a.product_id AS product1, b.product_id AS product2, COUNT(*) AS frequency FROM order_items a JOIN order_items b ON a.order_id = b.order_id AND a.product_id < b.product_id GROUP BY product1, product2 HAVING COUNT(*) > 10 ORDER BY frequency DESC LIMIT 5",
    "SELECT DATE_TRUNC('month', signup_date) AS cohort_month, COUNT(*) AS signups, COUNT(CASE WHEN last_login >= NOW() - INTERVAL '30 days' THEN 1 END) AS active_users FROM users GROUP BY cohort_month ORDER BY cohort_month",
    "SELECT department_name, budget, actual_spend, (actual_spend - budget) AS variance, ((actual_spend - budget)/budget)*100 AS variance_pct FROM departments WHERE actual_spend > budget",
    "SELECT funnel_stage, COUNT(*) AS users, 100 - (COUNT(*)::float / LAG(COUNT(*)) OVER (ORDER BY stage_order)) * 100 AS dropoff_pct FROM (SELECT user_id, funnel_stage, CASE funnel_stage WHEN 'view' THEN 1 WHEN 'cart' THEN 2 WHEN 'checkout' THEN 3 ELSE 4 END AS stage_order FROM conversion_funnel) GROUP BY funnel_stage, stage_order ORDER BY stage_order",
    "WITH monthly_spend AS (SELECT customer_id, DATE_TRUNC('month', order_date) AS month, SUM(amount) AS spend FROM orders GROUP BY customer_id, month) SELECT customer_id, CORR(EXTRACT(EPOCH FROM month), spend) AS trend FROM monthly_spend GROUP BY customer_id HAVING CORR(EXTRACT(EPOCH FROM month), spend) < -0.5",
    "SELECT category, SUM(sales) / AVG(inventory) AS turnover_ratio FROM (SELECT category, SUM(amount) AS sales, AVG(stock_quantity) AS inventory FROM products JOIN sales USING(product_id) JOIN inventory USING(product_id) GROUP BY category)",
    "SELECT transaction_id, amount, ip_address FROM transactions WHERE amount > 10000 AND ip_address NOT IN (SELECT DISTINCT ip_address FROM transactions WHERE transaction_date < NOW() - INTERVAL '30 days')",
    "SELECT gender, AVG(EXTRACT(DAY FROM (promotion_date - hire_date))/365) AS years_to_promotion FROM employees WHERE promotion_date IS NOT NULL GROUP BY gender",
    "SELECT EXTRACT(MONTH FROM return_date) AS month, COUNT(*) AS return_count FROM returns GROUP BY month ORDER BY month",
    "SELECT acquisition_channel, SUM(amount) / COUNT(DISTINCT customer_id) AS avg_lifetime_value FROM customers JOIN orders USING(customer_id) GROUP BY acquisition_channel",
    "SELECT supplier_id, COUNT(CASE WHEN delivered_date <= promised_date THEN 1 END)::float / COUNT(*) * 100 AS on_time_pct FROM shipments GROUP BY supplier_id HAVING COUNT(CASE WHEN delivered_date <= promised_date THEN 1 END)::float / COUNT(*) * 100 < 90"
  ]
}