{
  "natural_language": [
    "Show me a chart of employee count by department",
    "Create a bar chart of total sales by product category",
    "Visualize monthly revenue trends as a line chart",
    "Display a pie chart of customer distribution by region",
    "Generate a chart showing average salary by job title",
    "Plot a chart of inventory levels by product",
    "Show me employee count by department for salaries over $50,000",
    "Chart the number of orders by day of week",
    "Visualize the age distribution of employees",
    "Create a chart of project completion by status",
    "Show employee count by department as a bar chart",
    "Display total sales by product category",
    "Visualize monthly revenue trends as line chart",
    "Show customer distribution by region as pie chart",
    "List employees earning more than $50,000",
    "Find customers who made purchases last month",
    "Show average order value by day of week",
    "Display inventory levels below threshold",
    "List projects due this week",
    "Show employee count by department for salaries over $75,000",
    "Display product sales by quarter",
    "Find customers without orders in last 6 months",
    "Show support ticket count by priority",
    "List longest-running projects",
    "Display website traffic by source",
    "give me the employee names",
    "Visualize monthly sales trends as a line chart",
    "Display product distribution by category as pie chart",
    "List high-value customers (purchases > $1000)",
    "Show average salary by job level",
    "Find inactive users (no login in 30 days)",
    "Chart weekly website traffic by source",
    "List overdue projects with owners",
    "Show inventory stock levels below threshold",
    "Display customer satisfaction scores by region",
    "Chart employee turnover by quarter",
    "Find products with highest return rates",
    "Show support ticket resolution times",
    "Visualize sales funnel conversion rates",
    "List most active support agents",
    "Show quarterly revenue growth YoY as line chart",
    "Find customers with purchases in 3+ categories",
    "List employees with above-average salary in their department",
    "Chart support ticket resolution time by priority (High/Medium/Low)",
    "Identify products frequently bought together (market basket analysis)",
    "Show user retention cohorts by signup month",
    "Find departments exceeding budget with variance percentage",
    "Visualize sales funnel drop-off rates between stages",
    "List customers with declining monthly spend (trend detection)",
    "Show inventory turnover ratio by product category",
    "Identify fraudulent transactions (amount > $10,000 from new IP)",
    "Chart employee promotion timelines by gender (diversity analysis)",
    "Find seasonal patterns in product returns",
    "Show customer lifetime value by acquisition channel",
    "List suppliers with on-time delivery rate below 90%",
    "Show me all customers from New York",
    "List the top 5 products by sales",
    "Count the number of orders per month in 2023",
    "Show a chart of revenue by product category",
    "Show all customers from California",
    "List the top 3 most expensive products",
    "Count how many orders were placed last month",
    "Find customers who haven't placed any orders",
    "Show total sales by product category",
    "List employees hired in the last 6 months",
    "Find orders with amounts greater than $1000",
    "Show average order value by month",
    "List products with less than 10 units in stock",
    "Find customers with more than 5 orders",
    "Show revenue by quarter for the current year",
    "List all active products in the Electronics category",
    "Find orders that haven't shipped yet",
    "Show customer count by state",
    "List products that have never been ordered"
  ],
  "sql": [
    "SELECT d.name AS department_name, COUNT(e.id) AS employee_count FROM department d LEFT JOIN employee e ON d.id = e.department_id GROUP BY d.name",
    "SELECT p.category AS product_category, SUM(s.amount) AS total_sales FROM products p JOIN sales s ON p.id = s.product_id GROUP BY p.category",
    "SELECT TO_CHAR(sale_date, 'YYYY-MM') AS month, SUM(amount) AS monthly_revenue FROM sales GROUP BY TO_CHAR(sale_date, 'YYYY-MM') ORDER BY month",
    "SELECT region, COUNT(*) AS customer_count FROM customers GROUP BY region",
    "SELECT job_title, AVG(salary) AS average_salary FROM employees GROUP BY job_title",
    "SELECT product_name, quantity_in_stock AS inventory_level FROM products ORDER BY quantity_in_stock DESC",
    "SELECT d.name AS department_name, COUNT(e.id) AS employee_count FROM department d JOIN employee e ON d.id = e.department_id WHERE e.salary > 50000 GROUP BY d.name",
    "SELECT EXTRACT(DOW FROM order_date) AS day_of_week, COUNT(*) AS order_count FROM orders GROUP BY EXTRACT(DOW FROM order_date) ORDER BY day_of_week",
    "SELECT FLOOR(age/10)*10 AS age_range, COUNT(*) AS employee_count FROM employees GROUP BY FLOOR(age/10)*10 ORDER BY age_range",
    "SELECT status, COUNT(*) AS project_count FROM projects GROUP BY status",
    "SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_name",
    "SELECT p.category, SUM(s.amount) AS total_sales FROM products p JOIN sales s ON p.product_id = s.product_id GROUP BY p.category",
    "SELECT DATE_TRUNC('month', order_date) AS month, SUM(amount) AS monthly_revenue FROM orders GROUP BY DATE_TRUNC('month', order_date) ORDER BY month",
    "SELECT region, COUNT(customer_id) AS customer_count FROM customers GROUP BY region",
    "SELECT employee_name, salary FROM employees WHERE salary > 50000 ORDER BY salary DESC",
    "SELECT customer_name, email FROM customers WHERE customer_id IN (SELECT DISTINCT customer_id FROM orders WHERE order_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month'))",
    "SELECT EXTRACT(DOW FROM order_date) AS day_of_week, ROUND(AVG(amount), 2) AS avg_order_value FROM orders GROUP BY EXTRACT(DOW FROM order_date) ORDER BY day_of_week",
    "SELECT product_name, quantity FROM inventory WHERE quantity < minimum_threshold ORDER BY quantity ASC",
    "SELECT project_name, due_date FROM projects WHERE due_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days' ORDER BY due_date",
    "SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM departments d JOIN employees e ON d.department_id = e.department_id WHERE e.salary > 75000 GROUP BY d.department_name",
    "SELECT EXTRACT(QUARTER FROM sale_date) AS quarter, SUM(amount) AS total_sales FROM sales GROUP BY EXTRACT(QUARTER FROM sale_date) ORDER BY quarter",
    "SELECT customer_name, email FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '6 months')",
    "SELECT priority, COUNT(ticket_id) AS ticket_count FROM support_tickets GROUP BY priority ORDER BY CASE priority WHEN 'High' THEN 1 WHEN 'Medium' THEN 2 ELSE 3 END",
    "SELECT project_name, (CURRENT_DATE - start_date) AS days_running FROM projects WHERE status = 'Active' ORDER BY days_running DESC LIMIT 5",
    "SELECT traffic_source, COUNT(session_id) AS visit_count FROM website_analytics GROUP BY traffic_source ORDER BY visit_count DESC",
    "SELECT name FROM employee",
    "SELECT DATE_TRUNC('month', order_date) AS month, SUM(amount) AS sales FROM orders GROUP BY month ORDER BY month",
    "SELECT category, COUNT(product_id) AS product_count FROM products GROUP BY category",
    "SELECT customer_name, email, SUM(amount) AS total_spent FROM customers JOIN orders USING(customer_id) GROUP BY customer_id HAVING SUM(amount) > 1000 ORDER BY total_spent DESC",
    "SELECT job_level, ROUND(AVG(salary), 2) AS avg_salary FROM employees GROUP BY job_level",
    "SELECT username, last_login FROM users WHERE last_login < NOW() - INTERVAL '30 days'",
    "SELECT traffic_source, DATE_TRUNC('week', visit_date) AS week, COUNT(*) AS visits FROM web_traffic GROUP BY traffic_source, week ORDER BY week",
    "SELECT project_name, owner_name, due_date FROM projects WHERE status = 'overdue'",
    "SELECT product_name, stock_quantity FROM inventory WHERE stock_quantity < reorder_level",
    "SELECT region, AVG(satisfaction_score) AS avg_score FROM customer_feedback GROUP BY region ORDER BY avg_score DESC",
    "SELECT EXTRACT(QUARTER FROM departure_date) AS quarter, COUNT(*) AS turnover_count FROM employee_history WHERE status = 'left' GROUP BY quarter",
    "SELECT product_name, (COUNT(CASE WHEN return_flag THEN 1 END)::float/COUNT(*)) AS return_rate FROM orders GROUP BY product_name HAVING COUNT(*) > 10 ORDER BY return_rate DESC LIMIT 5",
    "SELECT ticket_type, AVG(EXTRACT(EPOCH FROM (resolved_at - created_at))/3600 AS avg_hours_to_resolve FROM support_tickets WHERE resolved_at IS NOT NULL GROUP BY ticket_type",
    "SELECT funnel_stage, COUNT(user_id) AS user_count FROM conversion_funnel GROUP BY funnel_stage ORDER BY CASE funnel_stage WHEN 'view' THEN 1 WHEN 'cart' THEN 2 WHEN 'checkout' THEN 3 ELSE 4 END",
    "SELECT agent_name, COUNT(ticket_id) AS resolved_tickets FROM support_tickets WHERE status = 'resolved' GROUP BY agent_name ORDER BY resolved_tickets DESC LIMIT 5",
    "SELECT EXTRACT(QUARTER FROM sale_date) AS quarter, EXTRACT(YEAR FROM sale_date) AS year, SUM(amount) AS revenue, (SUM(amount) - LAG(SUM(amount), 4) OVER (ORDER BY EXTRACT(YEAR FROM sale_date), EXTRACT(QUARTER FROM sale_date))) / LAG(SUM(amount), 4) OVER (ORDER BY EXTRACT(YEAR FROM sale_date), EXTRACT(QUARTER FROM sale_date))) * 100 AS yoy_growth FROM sales GROUP BY quarter, year ORDER BY year, quarter",
    "SELECT customer_id, COUNT(DISTINCT category_id) AS unique_categories FROM orders JOIN products USING(product_id) GROUP BY customer_id HAVING COUNT(DISTINCT category_id) >= 3",
    "SELECT e.employee_name, e.salary, d.department_name, (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id) AS dept_avg FROM employees e JOIN departments d USING(department_id) WHERE e.salary > (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id)",
    "SELECT priority, AVG(EXTRACT(EPOCH FROM (resolved_at - created_at))/3600) AS avg_hours FROM support_tickets WHERE resolved_at IS NOT NULL GROUP BY priority ORDER BY CASE priority WHEN 'High' THEN 1 WHEN 'Medium' THEN 2 ELSE 3 END",
    "SELECT a.product_id AS product1, b.product_id AS product2, COUNT(*) AS frequency FROM order_items a JOIN order_items b ON a.order_id = b.order_id AND a.product_id < b.product_id GROUP BY product1, product2 HAVING COUNT(*) > 10 ORDER BY frequency DESC LIMIT 5",
    "SELECT DATE_TRUNC('month', signup_date) AS cohort_month, COUNT(*) AS signups, COUNT(CASE WHEN last_login >= NOW() - INTERVAL '30 days' THEN 1 END) AS active_users FROM users GROUP BY cohort_month ORDER BY cohort_month",
    "SELECT department_name, budget, actual_spend, (actual_spend - budget) AS variance, ((actual_spend - budget)/budget)*100 AS variance_pct FROM departments WHERE actual_spend > budget",
    "SELECT funnel_stage, COUNT(*) AS users, 100 - (COUNT(*)::float / LAG(COUNT(*)) OVER (ORDER BY stage_order)) * 100 AS dropoff_pct FROM (SELECT user_id, funnel_stage, CASE funnel_stage WHEN 'view' THEN 1 WHEN 'cart' THEN 2 WHEN 'checkout' THEN 3 ELSE 4 END AS stage_order FROM conversion_funnel) GROUP BY funnel_stage, stage_order ORDER BY stage_order",
    "WITH monthly_spend AS (SELECT customer_id, DATE_TRUNC('month', order_date) AS month, SUM(amount) AS spend FROM orders GROUP BY customer_id, month) SELECT customer_id, CORR(EXTRACT(EPOCH FROM month), spend) AS trend FROM monthly_spend GROUP BY customer_id HAVING CORR(EXTRACT(EPOCH FROM month), spend) < -0.5",
    "SELECT category, SUM(sales) / AVG(inventory) AS turnover_ratio FROM (SELECT category, SUM(amount) AS sales, AVG(stock_quantity) AS inventory FROM products JOIN sales USING(product_id) JOIN inventory USING(product_id) GROUP BY category)",
    "SELECT transaction_id, amount, ip_address FROM transactions WHERE amount > 10000 AND ip_address NOT IN (SELECT DISTINCT ip_address FROM transactions WHERE transaction_date < NOW() - INTERVAL '30 days')",
    "SELECT gender, AVG(EXTRACT(DAY FROM (promotion_date - hire_date))/365) AS years_to_promotion FROM employees WHERE promotion_date IS NOT NULL GROUP BY gender",
    "SELECT EXTRACT(MONTH FROM return_date) AS month, COUNT(*) AS return_count FROM returns GROUP BY month ORDER BY month",
    "SELECT acquisition_channel, SUM(amount) / COUNT(DISTINCT customer_id) AS avg_lifetime_value FROM customers JOIN orders USING(customer_id) GROUP BY acquisition_channel",
    "SELECT supplier_id, COUNT(CASE WHEN delivered_date <= promised_date THEN 1 END)::float / COUNT(*) * 100 AS on_time_pct FROM shipments GROUP BY supplier_id HAVING COUNT(CASE WHEN delivered_date <= promised_date THEN 1 END)::float / COUNT(*) * 100 < 90",
    "SELECT * FROM customers WHERE city ILIKE 'New York'",
    "SELECT product_name, SUM(quantity) as total_sales FROM products JOIN order_details ON products.product_id = order_details.product_id GROUP BY product_name ORDER BY total_sales DESC LIMIT 5",
    "SELECT TO_CHAR(order_date, 'YYYY-MM') as month, COUNT(*) as order_count FROM orders WHERE EXTRACT(YEAR FROM order_date) = 2023 GROUP BY month ORDER BY month",
    "SELECT category_name as \"Product Category\", SUM(unit_price * quantity) as \"Revenue\" FROM categories JOIN products ON categories.category_id = products.category_id JOIN order_details ON products.product_id = order_details.product_id GROUP BY category_name",
    "SELECT * FROM customers WHERE state = 'CA'",
    "SELECT product_name, price FROM products ORDER BY price DESC LIMIT 3",
    "SELECT COUNT(*) FROM orders WHERE order_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND order_date < DATE_TRUNC('month', CURRENT_DATE)",
    "SELECT c.* FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL",
    "SELECT c.category_name, SUM(od.quantity * od.unit_price) AS total_sales FROM categories c JOIN products p ON c.category_id = p.category_id JOIN order_details od ON p.product_id = od.product_id GROUP BY c.category_name",
    "SELECT * FROM employees WHERE hire_date >= CURRENT_DATE - INTERVAL '6 months' ORDER BY hire_date DESC",
    "SELECT * FROM orders WHERE total_amount > 1000 ORDER BY total_amount DESC",
    "SELECT DATE_TRUNC('month', order_date) AS month, AVG(total_amount) AS avg_order_value FROM orders GROUP BY month ORDER BY month",
    "SELECT product_name, units_in_stock FROM products WHERE units_in_stock < 10 ORDER BY units_in_stock",
    "SELECT c.customer_id, c.company_name, COUNT(o.order_id) AS order_count FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.company_name HAVING COUNT(o.order_id) > 5 ORDER BY order_count DESC",
    "SELECT DATE_TRUNC('quarter', order_date) AS quarter, SUM(total_amount) AS revenue FROM orders WHERE EXTRACT(YEAR FROM order_date) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY quarter ORDER BY quarter",
    "SELECT p.* FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.discontinued = false AND c.category_name = 'Electronics'",
    "SELECT * FROM orders WHERE shipped_date IS NULL AND order_date < CURRENT_DATE - INTERVAL '3 days'",
    "SELECT state, COUNT(*) AS customer_count FROM customers GROUP BY state ORDER BY customer_count DESC",
    "SELECT p.* FROM products p LEFT JOIN order_details od ON p.product_id = od.product_id WHERE od.order_id IS NULL"
  ]
}